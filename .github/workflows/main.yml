# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  pull_request:
    branches:  ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    if: github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Tests - need to pass
  tests:
    runs-on: ubuntu-latest
    needs: errors  # Ensure this runs after the errors job

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install testing tools
        run: |
          python -m pip install --upgrade pip
          pip install pytest  # Add any other dependencies your tests need

      - name: Run Tests
        run: |
          pytest tests/  # runs all tests in this directory

  # Errors - need to pass
  errors:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-nb

      - name: Run Flake8 for errors
        run: |
          flake8 --select=E,W . # Adjust according to errors to include

  # Linting/formatting - dont need to pass
  formatting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install sqlparse==0.4.3 'black[jupyter]' flake8 flake8-nb flake8-sql

      - name: Run Flake8 (linter)
        run: |
          flake8 --ignore=Q447,Q449 .

      - name: Run Black (code formatter)
        run: |
          black --check .
